CPython implementation detail: In CPython, due to the Global Interpreter Lock,
only one thread can execute Python code at once (even though certain
performance-oriented libraries might overcome this limitation). If you want
your application to make better use of the computational resources of
multi-core machines, you are advised to use multiprocessing or
concurrent.futures.ProcessPoolExecutor. However, threading is still an
appropriate model if you want to run multiple I/O-bound tasks simultaneously.

Python’s Thread class supports a subset of the behavior of Java’s Thread
class; currently, there are no priorities, no thread groups, and threads
cannot be destroyed, stopped, suspended, resumed, or interrupted.

Thread-local data is data whose values are thread specific. To manage
thread-local data, just create an instance of local (or a subclass) and
store attributes on it:

mydata = threading.local()
mydata.x = 1
The instance’s values will be different for separate threads.

Only override the __init__() and run() methods of the Thread class.

Once a thread object is created, its activity must be started by calling
the thread’s start() method. This invokes the run() method in a separate
thread of control.

Once the thread’s activity is started, the thread is considered ‘alive’.
It stops being alive when its run() method terminates – either normally,
or by raising an unhandled exception. The is_alive() method tests whether
the thread is alive.

Other threads can call a thread’s join() method. This blocks the calling
thread until the thread whose join() method is called is terminated.

A thread has a name. The name can be passed to the constructor, and read
or changed through the name attribute.

If the run() method raises an exception, threading.excepthook() is called
to handle it. By default, threading.excepthook() ignores silently
SystemExit.

A thread can be flagged as a “daemon thread”. The significance of this flag
is that the entire Python program exits when only daemon threads are left.
The initial value is inherited from the creating thread. The flag can be
set through the daemon property or the daemon constructor argument.

Daemon threads are abruptly stopped at shutdown. Their resources (such as
open files, database transactions, etc.) may not be released properly. If
you want your threads to stop gracefully, make them non-daemonic and use a
suitable signalling mechanism such as an Event.

There is a “main thread” object; this corresponds to the initial thread of
control in the Python program. It is not a daemon thread.

